#
import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

sns.set_style('whitegrid')
import operator 

import file('File name and Path')

#Inventory Simulation
##1 BENELUX   .... Weekly Stochastic(i.e Probabilistic) demand for TCs:


#Week1 Inflow=start_stock


def daily_demand(mean,probability): #probability is order days probability
    random_num = np.random.uniform(0, 1)
    if random_num > probability:
        return 0
    else:
        return np.exp(np.random.normal(mean))
    
def daily_input(mean2, probability2):
    random_num2 = np.random.uniform(0, 1)
    if random_num2 > probability2:
        return 0
    else:
        return np.exp(np.random.normal(mean2))


##2. Inventory Simulation for TCs:


def cc_monte_carlo_jay(Region,q):
    RegionName = Region.TC_Region_Type
    inventory = Region.starting_stock
    mean = Region.mean
    sd = Region.sd
    mean2 = Region.mean2
    sd2 = Region.sd2
    #lead_time = Region.lead_time
    probability = Region.probability
    probability2 = Region.probability2
    Mean_Transit_Days= Region.Mean_Transit_Days
    Max_Transit_Days= Region.Max_Transit_Days
    Min_Transit_Days= Region.Min_Transit_Days
    r= (mean)*(Min_Transit_Days)

    order_placed = False
    order_time = 0
    stock_out = 0
    
   
    #r= #Reorder point= (avg_daily_UnitSales* delivery_LeadTime)+Safety_stock
    # dictionary to store all the information
    data = {'inv_level': [], 'daily_demand': [], 'daily_input': [] , 'units_sold': [], 'units_lost': [], 'orders': [],'r':[],'diff':[], 'Deficit':[],'Surplus':[],'daysD':[], 'Deficit_Depot':[],'Surplus_Depot':[],'md':[],'rd':[],'Depot':[]}
    data['r'].append(r)
    
    for day in range(1, 335):
        day_demand = daily_demand(mean,probability)
        data['daily_demand'].append(day_demand)
        
        day_input = daily_input(mean2, probability2)
        data['daily_input'].append(day_input)
        
        
        
            
           
        if inventory - day_demand + day_input >= 0:
            data['units_sold'].append(day_demand)
            inventory -= day_demand
            inventory += day_input
            
            
        
            
        elif inventory - day_demand + day_input < 0:
            data['units_sold'].append(inventory + day_input)
            data['units_lost'].append(day_demand - inventory - day_input)
            inventory = 0

          
        
        diff = inventory-r
        data['diff'].append(diff)
        data['inv_level'].append(inventory)
       
        if diff<=-0.5: #Deficit
            
            Deficit = round(abs(diff))
            data['Deficit'].append(Deficit)
            data['daysD'].append(day)
            
                    
            
        
    if diff<=-0.5:
        print('Repositioning(Input) is needed on day',min(data['daysD']),'for the region','[',RegionName,']',':', 'And in Quantity:',round((np.array(data['Deficit']).mean())))
        data['md']= min(data['daysD'])
        data['rd']=round((np.array(data['Deficit']).mean()))
       
        data['Deficit_Depot'].append(RegionName)
        data['Depot'].append(RegionName)
        
        Surplus=0
        data['Surplus'].append(Surplus)
        

        
    if diff >-0.5 : #Surplus
        print('Surplus depot at:','[',RegionName,']','And in Quantity:', round(abs(min(data['diff']))))
        data['Surplus_Depot'].append(RegionName)
        Surplus=round(abs(min(data['diff'])))
        #Surplus=round(abs((min([i for i in data['diff'] if i > 0.1]))))
        data['Surplus'].append(Surplus)
        data['md']=0
        data['rd']=0
        data['Depot'].append(RegionName)
        
        
        

   
    

    return data


#ETCR Policy
x=[]
sdd=[]
d=[]

da=[]
dq=[]

sqq=[]
md=[]
rd=[]
for i in range(1,19):
    k=cc_monte_carlo_jay(Region(i),26)
    
    
    x.append(k)
    sds=(k['Depot'])
    sdd.append(sds)
    sdds=np.array(sdd)
    s=np.array(sdds).ravel()
    
    sqs=(k['Surplus'])
    sqq.append(sqs)
    sqqs=np.array(sqq)
    sq=np.array(sqqs).ravel()
    
    dd=(k['Depot'])
    d.append(dd)
    dad=(k['daysD'])
    da.append(dad)
    daa=da[0]
    dqd=(k['Deficit'])
    dq.append(dqd)
    dq
    mdd=(k['md'])
    md.append(mdd)
    rdd=(k['rd'])
    rd.append(rdd)
    
zipped = list(zip(s, sq, md, rd))
TCdf = pd.DataFrame(zipped, columns=['Depot', 'Surplus', 'Deficit_Day','Deficit'])
TCdf = TCdf.assign(Baffled=[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0])
TCdf = TCdf.assign(Region=['Benelux','Benelux','UK','UK','Europe South','Europe South','Scandinavia','Scandinavia','Europe East','Europe East','Europe Central','Europe Central','Germany','Germany','Turkey','Turkey','Israel','Israel'])
TCdf


#Surplus_Baffled
S_B=TCdf[(TCdf['Baffled']== 1) & (TCdf['Surplus']!= 0)] 
S_B
#Surplus_Non-Baffled
S_N=TCdf[(TCdf['Baffled']== 0) & (TCdf['Surplus']!= 0)] 
S_N
#Deficit_Baffled
D_B=TCdf[(TCdf['Baffled']== 1) & (TCdf['Surplus']== 0)] 
D_B
#Deficit_Non-Baffled
D_N=TCdf[(TCdf['Baffled']== 0) & (TCdf['Surplus']== 0)] 
D_N


DBM=D_N.loc[D_N['Deficit_Day']==min(D_N['Deficit_Day'])]

print(S_B)
print(S_N)
print(D_B)
print(D_N)
print('\n \n')
#####

####[1.]Same Regions: Internal Repositioning (Baffled are proritised over Non-Baffled)

DNSB1=S_B.loc[S_B.Region.isin(D_N.Region)]
DNSB11=DNSB1.reset_index()
DNSB2=D_N.loc[D_N.Region.isin(S_B.Region)]
DNSB22=DNSB2.reset_index()
print(DNSB11)#Surplus

print(DNSB22)#Deficit
print('\n \n \n \n')

print('\n \n')
print('{1.}')
for i in range(len(DNSB11)):
    if DNSB11.Surplus.loc[i] >= DNSB22.Deficit.loc[i]:
        print('ETCR Done for', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB22.Deficit.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i] )
        DNSB1['Surplus']=(DNSB11.Surplus.values - DNSB22.Deficit.values).clip(min=0)
        DNSB2['Deficit']=(DNSB22.Deficit.values - DNSB11.Surplus.values).clip(min=0)
        
        #print(DNSB1)
    elif DNSB11.Surplus.loc[i] < DNSB22.Deficit.loc[i]:
        print('ETCR Done for', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB11.Surplus.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i])
        
print(DNSB1)
print(DNSB2)

#Updating the Surplus Baffled df
S_B.loc[DNSB1.index] = np.nan
S_B = S_B.combine_first(DNSB1)
S_B
#Updating the Deficit Non-Baffled df
D_N.loc[DNSB2.index] = np.nan
D_N = D_N.combine_first(DNSB2)
D_N
##########################################
print(DNSB11)
#DNSB22.index
print(DNSB22)
print('\n \n \n \n')


print('{1.}')
for i in range(len(DNSB11)):
    if DNSB11.Surplus.loc[i] >= DNSB22.Deficit.loc[i]:
        print('ETCR Done for', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB22.Deficit.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i] )
        DNSB1['Surplus']=(DNSB11.Surplus.values - DNSB22.Deficit.values).clip(min=0)
        DNSB2['Deficit']=(DNSB22.Deficit.values - DNSB11.Surplus.values).clip(min=0)
        
    elif DNSB11.Surplus.loc[i] < DNSB22.Deficit.loc[i]:
        print('ETCR Done for', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB11.Surplus.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i])
        #DNSB1['Surplus']= (DNSB11.Surplus.values - DNSB11.Surplus.values)
        
print(DNSB1)
print(DNSB2)


S_B.loc[DNSB1.index] = np.nan
S_B = S_B.combine_first(DNSB1)
S_B

D_N.loc[DNSB2.index] = np.nan
D_N = D_N.combine_first(DNSB2)
D_N

print('\n \n \n \n')

####[2.]Different Regions:
print('{2.}')
####[2.1.]Baffled
print('{2.1.}')

#
print('\n \n \n \n')
#1-Surplus df
frames1 = [S_B, S_N]
  
SBN0 = pd.concat(frames1)
SBN1=SBN0.sort_values('Surplus', ascending=False)
SBN=SBN1.reset_index()
display(SBN)

#2-Deficit df
frames2 = [D_B, D_N]
  
DBN0 = pd.concat(frames2)
DBN1=DBN0.sort_values(['Deficit_Day','Deficit'],ascending=[True,False])
DBN=DBN1.reset_index()
display(DBN)


#B
for i in range(len(DBN)):
    if SBN.Baffled[i]==1:
        if SBN.Surplus.loc[i] >= DBN.Deficit.loc[i]:
            print('ETCR Required from', SBN.Depot.loc[i],'to',DBN.Depot.loc[i],'And in Quantity:',DBN.Deficit.loc[i], 'on day:',DBN.Deficit_Day.loc[i] )
            SBN['Surplus'][i]=(SBN.Surplus.values[i] - DBN.Deficit.values[i]).clip(min=0)
            DBN['Deficit'][i]=(DBN.Deficit.values[i] - SBN.Surplus.values[i]).clip(min=0)
            
        elif SBN.Surplus.loc[i] < DBN.Deficit.loc[i]:
            print('ETCR Required from', SBN.Depot.loc[i],'to',DBN.Depot.loc[i],'And in Quantity:',SBN.Surplus.loc[i], 'on day:',DBN.Deficit_Day.loc[i])
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
            DBN['Deficit'][i]=(DBN.Deficit.values[i] - SBN.Surplus.values[i]).clip(min=0)
            
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
            SBN['Surplus'][i]=( DBN.Deficit.values[i]-SBN.Surplus.values[i] ).clip(min=0)
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
            
    elif (SBN.Baffled[i]==0) & (DBN.Baffled[i]==0):
        if SBN.Surplus.loc[i] >= DBN.Deficit.loc[i]:
            print('ETCR Required from', SBN.Depot.loc[i],'to',DBN.Depot.loc[i],'And in Quantity:',DBN.Deficit.loc[i], 'on day:',DBN.Deficit_Day.loc[i] )
            SBN['Surplus'][i]=(SBN.Surplus.values[i] - DBN.Deficit.values[i]).clip(min=0)
            DBN['Deficit'][i]=(DBN.Deficit.values[i] - SBN.Surplus.values[i]).clip(min=0)
            
        elif SBN.Surplus.loc[i] < DBN.Deficit.loc[i]:
            print('ETCR Required from', SBN.Depot.loc[i],'to',DBN.Depot.loc[i],'And in Quantity:',SBN.Surplus.loc[i], 'on day:',DBN.Deficit_Day.loc[i])
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
            DBN['Deficit'][i]=(DBN.Deficit.values[i] - SBN.Surplus.values[i]).clip(min=0)
            
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
            SBN['Surplus'][i]=(DBN.Deficit.values[i]-SBN.Surplus.values[i] ).clip(min=0)
            print((DBN.Deficit.values[1]))
            print((SBN.Surplus.values[1]))
           
    
    
        
display(SBN)
display(DBN)
print('\n \n \n \n')

#
####[2.]Different Regions:
print('{2.}')
####[2.1.]Baffled
print('{2.2.}')

#
SBNe=(SBN['Baffled']==1)
SBNew1=pd.DataFrame(SBN[SBNe])
SBNew0=SBNew1.sort_values('Surplus', ascending=False)
SBNew=SBNew0.reset_index(drop=True)
display(SBNew)
#
for i in range(len(DBN)) :
    if DBN.Deficit[i]!=0 & (max(SBNew['Surplus']) >= max(DBN['Deficit'])):
        print(DBN.Deficit[i])
        RETCR=SBNew.Depot.values[SBNew['Surplus']==max(SBNew['Surplus'])]
        #RS= SBNew.Surplus.values[SBNew['Surplus']==max(SBNew['Surplus'])]
        RI=SBNew['Surplus'].idxmax()    
        #sumOut_EUr_nb = (df['eqpidkeyp11'] == 'NOBAFFLES')
        #df_soe1r_nb = pd.DataFrame(df[sumOut_EUr_nb])
        RS=SBNew.Surplus.values[RI]    
        print(RS)
        #print(SBNew['Surplus'][RI])
        #print(DBN.Deficit.loc[i])
        #print(SBNew.Surplus.loc[RI])
        print('ETCR Required from', RETCR,'to',DBN.Depot.loc[i],'And in Quantity:',DBN.Deficit.loc[i], 'on day:',DBN.Deficit_Day.loc[i] )
        SBNew['Surplus'][RI] = RS - DBN.Deficit.values[i]         
        DBN['Deficit'][i] = (DBN.Deficit.values[i] - RS).clip(min=0)    
        
        
display(SBNew)
display(DBN)

#############################################
####[3]Different Regions: Remaining Surplus Baffled and Deficit Non-Baffled
#1-Surplus df
frames1 = [S_B, S_N]
  
SBN = pd.concat(frames1)
display(SBN)

#2-Deficit df
frames2 = [D_B, D_N]
  
DBN = pd.concat(frames2)
display(DBN)

print('\n \n \n \n')
#print(DNSB1['Surplus'])
#print(DNSB11.Deficit.loc[i])
print('\n \n')
print('{3.}')
for i in range(len(DNSB11)):
    if DNSB11.Surplus.loc[i] >= DNSB22.Deficit.loc[i]:
        print('ETCR Required from', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB22.Deficit.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i] )
        DNSB1['Surplus']=(DNSB11.Surplus.values - DNSB22.Deficit.values).clip(min=0)
        DNSB2['Deficit']=(DNSB22.Deficit.values - DNSB11.Surplus.values).clip(min=0)
        
        #print(DNSB1)
    elif DNSB11.Surplus.loc[i] < DNSB22.Deficit.loc[i]:
        print('ETCR Required from', DNSB11.Depot.loc[i],'to',DNSB22.Depot.loc[i],'And in Quantity:',DNSB11.Surplus.loc[i], 'on day:',DNSB22.Deficit_Day.loc[i])
        #DNSB1['Surplus']= (DNSB11.Surplus.values - DNSB11.Surplus.values)
        #print(DNSB1)
print(DNSB1)
print(DNSB2)

#Updating the Surplus Baffled df
S_B.loc[DNSB1.index] = np.nan
S_B = S_B.combine_first(DNSB1)
S_B
#Updating the Deficit Non-Baffled df
D_N.loc[DNSB2.index] = np.nan
D_N = D_N.combine_first(DNSB2)
D_N

